[buildout]
# See which products are not pinned.
extensions = buildout.dumppickedversions

find-links =
    http://dist.plone.org
    http://effbot.org/downloads
    http://pypi.zestsoftware.nl/public/

parts =
    instance
    munin
    test
    i18n-overrides
    varnish-conf
    pcre
    varnish-build
    varnish
    supervisor
#    maildrop
     env
     
eggs =
develop =
    src/Products.minaraad
    src/minaraad.projects

allow-picked-versions = false
extends =
    versions.cfg
versions = versions

[env]
recipe = gocept.recipe.env
# The recipe reads environment variables. This next empty value is
# only used when the environment variable does not exist, so that
# buildout does not give an error when it wants to use the variable.
HTTP_PROXY =

[conf]
# Ports
instance = 8080
varnish = 12080

# Sizes
varnish-cache-size = 256M

# Schedules.  Make specific in other cfg files.
pack-time = @daily
projects-reminder-time = @weekly

# Debugging
debug = on

# Log for e-mail sending
minaraad-log-path = ${buildout:directory}/var/log

# You should set Proxy Cache Domains manually in the
# portal_cache_settings in the Plone UI and set them up to allow
# purging the varnish cache with the following setting.  You must add
# a semicolon at the end of each line.
varnish_purge_hosts =
    "127.0.0.1";

# IP or hostname that varnish listens on.  Usually, 127.0.0.1 is
# enough, but in Belgium this should include the public interface,
# because the loadbalancer is on a separate machine and varnish should
# accept connections there.  But '*' works for that, at least on
# Linux.  The Mac does not like it.
varnish_host = *


[plone]
recipe = plone.recipe.plone
zope2-url = http://www.zope.org/Products/Zope/2.10.12/Zope-2.10.12-final.tgz
# unpin these eggs:
eggs =
    plone.session


[zope2]
recipe = plone.recipe.zope2install
url = ${plone:zope2-url}
fake-zope-eggs = true
additional-fake-eggs =
    ZConfig
    ZODB3
    pytz


# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
[productdistros]
recipe = plone.recipe.distros
urls =
    http://plone.org/products/orderablereferencefield/releases/1.1/OrderableReferenceField-1.1.tar.gz
    http://plone.org/products/plone-hotfix/releases/20100612/plonehotfix20100612-1.tar.gz
nested-packages =
version-suffix-packages =


[test]
recipe = collective.recipe.z2testrunner
zope2part = instance
packages =
    Products.minaraad
    minaraad.projects


[instance]
recipe = plone.recipe.zope2instance
zope2-location = ${zope2:location}
zeo-client = false
user = admin:admin
http-address = ${conf:instance}
debug-mode = ${conf:debug}
verbose-security = ${conf:debug}
zserver-threads = 3
environment-vars =
    PTS_LANGUAGES nl
    MINARAAD_LOG_PATH ${conf:minaraad-log-path}
    HTTP_PROXY ${env:HTTP_PROXY}

eggs =
    ${buildout:eggs}
    ${plone:eggs}
    Products.minaraad
    minaraad.projects
    elementtree
    Products.CacheSetup
    Products.DataGridField
    Products.FCKeditor
    Products.PloneHotfix20110720
    Products.PloneHotfix20121106
    Products.Zope_Hotfix_20110622
#    Products.SecureMaildropHost
    Products.SimpleAttachment
    collective.autopermission
    collective.emaillogin
    collective.recaptcha
    jquery.pyproxy
    munin.zope
    archetypes.schemaextender

zcml =
    collective.autopermission
    collective.emaillogin
    collective.recaptcha
    minaraad.projects
    jquery.pyproxy
    munin.zope

products =
    ${productdistros:location}
    ${plone:products}
#    ${maildrop:location}


[i18n-overrides]
recipe = collective.recipe.i18noverrides
source = ${buildout:directory}/scripts


[maildrop]
recipe = infrae.maildrophost
smtp_host = mail.zestsoftware.nl
smtp_port = 25
version = 1.22
supervised_daemon = 1


[munin]
# Will be used to monitor the instance.
recipe = zc.recipe.egg
eggs = munin.zope
password = secret
arguments = http_address='${conf:instance}', user='munin:${:password}'


[varnish-conf]
recipe = collective.recipe.template[genshi]:genshi
input = templates/varnish.vcl.in
output = ${buildout:parts-directory}/conf/varnish.vcl


[pcre]
recipe = hexagonit.recipe.cmmi
url = http://downloads.sourceforge.net/project/pcre/pcre/8.12/pcre-8.12.tar.gz


[varnish-build]
recipe = hexagonit.recipe.cmmi
url = ${versions:varnish-url}
configure-options =
    PCRE_CFLAGS=-I${buildout:directory}/parts/pcre/include
    PCRE_LIBS="-L${buildout:directory}/parts/pcre/lib -lpcre"


[varnish]
recipe = plone.recipe.varnish
daemon = ${buildout:parts-directory}/varnish-build/sbin/varnishd
config = ${buildout:parts-directory}/conf/varnish.vcl
bind = ${conf:varnish_host}:${conf:varnish}
cache-size = ${conf:varnish-cache-size}
mode = foreground


[supervisor]
recipe = collective.recipe.supervisor
file = ${buildout:directory}/var/supervisor.sock 
http-socket = unix 
plugins = superlance
programs =
      10 instance ${buildout:bin-directory}/instance [console]
      30 varnish (exitcodes=0) ${buildout:directory}/bin/varnish [-p cli_timeout=10]
#      40 maildrop ${buildout:bin-directory}/maildrop [start] true
eventlisteners =
      memmon TICK_60 ${buildout:bin-directory}/memmon [-p instance=2560MB]


[crontab-start]
recipe = z3c.recipe.usercrontab
times = @reboot
command = ${buildout:directory}/bin/supervisord


[crontab-pack]
recipe = z3c.recipe.usercrontab
times = ${conf:pack-time}
command = ${buildout:directory}/bin/zodbpack --days=1 parts/conf/zodbpack.cfg 


[crontab-projects-reminder]
recipe = z3c.recipe.usercrontab
times = ${conf:projects-reminder-time}
command = ${buildout:directory}/scripts/cron_projects_reminder.py


[logrotate.conf]
recipe = zc.recipe.deployment:configuration
text =
    rotate 4
    weekly
    create
    compress
    delaycompress

    ${buildout:directory}/var/log/instance*.log ${conf:minaraad-log-path}/minaraad_email.log {
        sharedscripts
        postrotate
            /bin/kill -USR2 $(cat ${buildout:directory}/var/instance.pid)
        endscript
    }
