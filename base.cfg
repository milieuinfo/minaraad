[buildout]
# See which products are not pinned.
extensions =
    mr.developer

find-links =
    http://dist.plone.org/thirdparty/
    http://pypi.zestsoftware.nl/public/

parts =
    zeoserver
    zeoclient
    backup
    test
    warmup
    warmup-all
deployment-parts =
    munin
    varnish-build
    varnish-secret
    varnish-configuration
    varnish-clearcache
    varnishd
    supervisor
    debugclient
    crontab-start
# Restart plus warmup was done once a week at milieuinfo.
# Let's try without this on our servers.
#    crontab-restart
#    crontab-warmup
    crontab-pack
    crontab-projects-reminder
    crontab-cleanup-pas
    logrotate.conf

eggs =
develop =
    src/Products.minaraad
    src/minaraad.projects
    src/minaraad.theme

auto-checkout =
allow-picked-versions = false
show-picked-versions = true

extends =
    zopeapp-versions.cfg
    ztk-versions.cfg
    zope-versions.cfg
    plone-versions.cfg
    versions.cfg
versions = versions
sources = sources

[sources]

[chown]
recipe = plone.recipe.command
command = chmod 700 ${buildout:directory}/var/blobstorage

[conf]
# Ports
instance = 8080
zeoserver = 10080
varnish = 12080
varnish_telnet = 12082
varnish_next = ${:instance}

# Blob storage:
blob_storage = ${buildout:directory}/var/blobstorage

# Number of items in zeoclient memory per thread.
zodb-cache-size = 40000
# Varnish sparse file size
varnish-cache-size = 256M

project = minaraad
release = base
ramlocation = /dev/shm
# We need this for varnish and munin path & stats naming
projectrelease = ${:project}-${:release}

# var directory
var = ${buildout:directory}/var

# Schedules.  Make specific in other cfg files.
restart-time = 30 23 * * 0
warmup-time = 32 23 * * 0
pack-time = @weekly
projects-reminder-time = 0 0 * * 2,5
cleanup-pas-time = 30 1 * * 6

# Debugging.  Note that debug is automatically turned on when you run
# 'bin/instance fg'
debug = off
verbose_security = off

# Log for e-mail sending
minaraad-log-path = ${buildout:directory}/var/log

# IP or hostname that varnish listens on.
varnish_host = 127.0.0.1

# For warmup:
plonesite = minaraad
domain = www.minaraad.be

[test]
recipe = zc.recipe.testrunner
eggs =
    ${instance:eggs}
# We may want to fix Products/minaraad/tests/utils.py to not need these packages:
    zope.app.testing
    Products.PloneTestCase
defaults = ['--auto-color', '--auto-progress', '-s', 'Products.minaraad', '-s', 'minaraad.projects']
environment = test_env

[test_env]
PTS_LANGUAGES = nl
zope_i18n_allowed_languages = nl
zope_i18n_compile_mo_files = true

[zeoclient]
recipe = plone.recipe.zope2instance
zeo-client = true
zeo-address = ${conf:zeoserver}
user = admin:admin
http-address = ${conf:instance}
debug-mode = ${conf:debug}
verbose-security = ${conf:verbose_security}
zserver-threads = 3
zodb-cache-size = ${conf:zodb-cache-size}
blob-storage = ${conf:blob_storage}
shared-blob = on
environment-vars =
    PTS_LANGUAGES nl
    zope_i18n_allowed_languages nl
    MINARAAD_LOG_PATH ${conf:minaraad-log-path}
    zope_i18n_compile_mo_files true
    EXPERIMENTAL_PUBLISH_TRAVERSE_ONLY_WARN true

eggs =
    ${buildout:eggs}
    archetypes.schemaextender
# collective.emaillogin4 does some patches, so best load it early.
    collective.emaillogin4
    collective.embedly
    collective.mailchimp
    collective.recaptcha
    eea.facetednavigation
    elementtree
    experimental.publishtraverse
    jquery.pyproxy
    minaraad.projects
    minaraad.theme
    munin.zope
    Pillow
    Plone
    plone.api
    plone.app.imagecropping
    plone.app.theming
    plone.app.themingplugins
    plonetheme.sunburst
    Products.DataGridField
    Products.minaraad
    Products.OrderableReferenceField
    Products.PloneFormGen
    Products.SimpleAttachment
    quintagroup.seoptimizer
    five.pt

zcml =
    collective.recaptcha
    minaraad.projects
    minaraad.theme
    jquery.pyproxy
    munin.zope

locales = ${buildout:directory}/locales
products =

[instance]
<= zeoclient
zeo-client = false

[debugclient]
<= zeoclient
# eggs += does not work here
eggs =
    ${instance:eggs}
    wildcard.fixpersistentutilities
# Avoid starting an ftp server listening on the same port as the
# standard production client.
zope-conf-additional =

[zeoserver]
recipe = plone.recipe.zeoserver
zeo-address = 127.0.0.1:${conf:zeoserver}

[backup]
recipe = collective.recipe.backup
location = ~/backups/${conf:projectrelease}
blobbackuplocation = ~/backups/${conf:projectrelease}-blobs
blob_timestamps = true
enable_zipbackup = true

[munin]
# Will be used to monitor the instance.
recipe = zc.recipe.egg
eggs = munin.zope
password = secret
arguments = http_address='${conf:instance}', user='munin:${:password}'

[varnish-secret]
recipe = plone.recipe.command
command =
    dd if=/dev/random of=${conf:var}/varnish_secret count=1
    chmod 600 ${conf:var}/varnish_secret

[varnish-clearcache]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    ${varnish-build:location}/bin/varnishadm -T 127.0.0.1:${conf:varnish_telnet} -S ${conf:var}/varnish_secret "ban req.url ~ ."
    if test $? == 0; then
        echo "sent ban req.url ~ . command to varnish"
    else
        echo "Failed to sent ban req.url ~ . command to varnish"
    fi
output = ${buildout:directory}/bin/varnish-clearcache
mode = 755

[varnish-build]
recipe = plone.recipe.varnish:build
url = http://varnish-cache.org/_downloads/varnish-4.0.5.tar.gz

[varnish-configuration]
recipe = plone.recipe.varnish:configuration
backends = 127.0.0.1:${conf:varnish_next}

[varnishd]
recipe = plone.recipe.varnish:script
bind = ${conf:varnish_host}:${conf:varnish}
cache-size = ${conf:varnish-cache-size}
mode = foreground
name = ${conf:ramlocation}/${vars:safeprojectrelease}-varnish
telnet = 127.0.0.1:${conf:varnish_telnet}
secret-file = ${conf:var}/varnish_secret

[vars]
recipe = mr.scripty
# escape icky characters so we can use this in munin perlvars and/or filenames
safeprojectrelease =
    pr = self.buildout['conf']['projectrelease']
    return pr.lower().replace(".","X").replace("-","X").replace('_','X').replace('/','X')

[supervisor]
recipe = collective.recipe.supervisor
file = ${conf:var}/supervisord.sock
logfile = ${conf:var}/log/supervisord.log
pidfile = ${conf:var}/supervisord.pid
http-socket = unix
logfile-maxbytes = 5MB
logfile-backups = 5
supervisord-environment = PYTHONUNBUFFERED=true
programs =
    10 zeo      (startsecs=10 stderr_logfile=NONE stdout_logfile=${conf:var}/log/zeo-stdout.log) ${zeoserver:location}/bin/runzeo ${zeoserver:location} true
    20 instance (startsecs=10 stderr_logfile=NONE stdout_logfile=${conf:var}/log/zeoclient.log) ${buildout:directory}/bin/zeoclient [console] true
    30 varnish  (startsecs=10 stderr_logfile=NONE stdout_logfile=${conf:var}/log/varnish-stdout.log) ${buildout:directory}/bin/varnishd true

[crontab-start]
recipe = z3c.recipe.usercrontab
times = @reboot
command = ${buildout:directory}/bin/supervisord && sleep 15 && bin/warmup-all

[crontab-restart]
recipe = z3c.recipe.usercrontab
times = ${conf:restart-time}
command = ${buildout:directory}/bin/supervisorctl restart instance

[crontab-warmup]
recipe = z3c.recipe.usercrontab
times = ${conf:warmup-time}
command = ${buildout:directory}/bin/warmup-all

[crontab-pack]
recipe = z3c.recipe.usercrontab
times = ${conf:pack-time}
command = ${buildout:directory}/bin/zeopack

[crontab-projects-reminder]
recipe = z3c.recipe.usercrontab
times = ${conf:projects-reminder-time}
command = ${buildout:directory}/scripts/cron_projects_reminder.py

[crontab-cleanup-pas]
recipe = z3c.recipe.usercrontab
times = ${conf:cleanup-pas-time}
command = ${buildout:directory}/bin/instance run ${buildout:directory}/scripts/cleanup_pas.py

[logrotate.conf]
recipe = zc.recipe.deployment:configuration
text =
    rotate 4
    weekly
    create
    compress
    delaycompress

    ${buildout:directory}/var/log/instance*.log ${conf:minaraad-log-path}/minaraad_email.log {
        sharedscripts
        postrotate
            /bin/kill -USR2 $(cat ${buildout:directory}/var/instance.pid)
        endscript
    }

[warmup]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    # Example usage:
    # warmup http://localhost:8080/minaraad
    # warmup https://www.minaraad.be
    echo "Warmup zope server cache for $1..."
    wget -O /dev/null "$1/"
    wget -O /dev/null "$1/over-de-minaraad"
    wget -O /dev/null "$1/Contact"
    wget -O /dev/null "$1/zoeken"
    wget -O /dev/null "$1/themas"
    wget -O /dev/null "$1/themas/vergroening-van-de-economie"
    wget -O /dev/null "$1/themas/bestuurskwaliteit"
    wget -O /dev/null "$1/themas/materialen"
    wget -O /dev/null "$1/themas/biodiversiteit"
    wget -O /dev/null "$1/themas/hinder"
    wget -O /dev/null "$1/themas/klimaat"
    # Note that Digibib is only for authenticated users, so we don't load it.
    echo "Done warming up."
output = ${buildout:directory}/bin/warmup
mode = 755

[warmup-all]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    echo "Warming up zeoclient and varnish"
    # Actually, varnish is enough, if we spell the url correctly.
    # ${buildout:directory}/bin/warmup "http://localhost:${conf:instance}/${conf:plonesite}"
    ${buildout:directory}/bin/warmup "http://localhost:${conf:varnish}/VirtualHostBase/https/${conf:domain}:443/${conf:plonesite}/VirtualHostRoot"
    echo "Done!"
output = ${buildout:directory}/bin/warmup-all
mode = 755
