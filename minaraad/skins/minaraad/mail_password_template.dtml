<dtml-comment>
We use this as a hook into the existing password mailing
machinery. Otherwise, the resetRequest would go in a 
previous step.
</dtml-comment>

<dtml-try>
  <dtml-call "REQUEST.set('mem_id', member.getId())">
<dtml-except Unauthorized>
  <dtml-comment>
    CMFMember might be installed, check to see if member_id is provided
    for us in our namespace.
  </dtml-comment>
  <dtml-try>
    <dtml-call "REQUEST.set('mem_id', member_id)">
  <dtml-except NameError>
    <dtml-raise type="Password Reset Failure">Cannot retrieve member id.</dtml-raise>
  </dtml-try>
</dtml-try>

<dtml-try>
  <dtml-call "REQUEST.set('mem_email', member.getProperty('email'))">
<dtml-except Unauthorized>
  <dtml-comment>
    CMFMember might be installed, check to see if member_email is provided
    for us in our namespace.
  </dtml-comment>
  <dtml-try>
    <dtml-call "REQUEST.set('mem_email', member_email)">
  <dtml-except NameError>
    <dtml-raise type="Password Reset Failure">Cannot retrieve member email address.</dtml-raise>
  </dtml-try>
</dtml-try>

<dtml-let reset="portal_password_reset.requestReset(REQUEST.get('mem_id'))">

<dtml-with portal_properties>
From: "&dtml-email_from_name;" <&dtml-email_from_address;>
To: <dtml-var "REQUEST.get('mem_email')">
Errors-to: <&dtml-email_from_address;>
Subject: <dtml-var "translate('mailtemplate_subject_resetpasswordrequest', domain='passwordresettool')">

<dtml-var "translate('mailtemplate_text_linkreset', domain='minaraad')"> 

<dtml-var "translate('mailtemplate_text_linkreset2', domain='minaraad')">

<dtml-var "pwreset_constructURL(reset['randomstring'])">

<dtml-var "translate('mailtemplate_text_expirationdate_linkreset', domain='passwordresettool')"> <dtml-var "portal_password_reset.getExpirationTimeout()"> <dtml-var "translate('mailtemplate_hours', domain='minaraad')"> 

</dtml-with>

</dtml-let>