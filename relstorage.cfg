[buildout]
parts +=
# Create a database and user (you can do this by hand too):
#    postgresinit
# Create zodbpack and zodbconvert scripts:
    zodbscripts
# Generate a config file for packing the relstorage database:
    zodbpack-conf
# Generate a config file for converting from filestorage to relstorage:
    zodbconvert-conf
# Generate a config file for migration to shared blob storage:
    blobmigrate-conf
# Generate a config file for reverting from relstorage back to
# filestorage (nice way to backup the production postgres database to
# a local Data.fs):
    zodbrevert-conf


[postgresconf]
dbname = minaraad_plone
host = localhost
password = secret
# Default port on Ubuntu and Mac:
port = 5432
super-user = postgres
user = minaraad
dsn = dbname='${:dbname}' user='${:user}' host='${:host}' port='${:port}' password='${:password}'
# Source Data.fs for converting:
source = ${buildout:directory}/var/filestorage/Data.fs
# Destination Data.fs for creating a backup:
revert_destination = ${buildout:directory}/backup.fs

# Some directories to help compile psycopg2 (python postgres
# bindings).  Some, none or all may be needed on your operating
# system.
basedir =
bindir =
includedir =
libdir =
sharedir =

# OS X (Mac ports)
#basedir = /opt/local/lib/postgresql90
#bindir = ${:basedir}/bin
#includedir = /opt/local/include/postgresql90
#libdir = ${:basedir}/postgresql
#sharedir = /opt/local/share/postgresql90
#
# Ubuntu
#bindir = /usr/bin
#sharedir = /usr/share/postgresql/9.0/
#
# FreeBSD.
#basedir = /usr/local/lib/postgresql
#bindir = /usr/local/bin
#libdir = ${:basedir}
#includedir = /usr/local/include/postgresql
#sharedir = /usr/local/share/postgresql


[versions]
RelStorage = 1.6.2
collective.recipe.cmd = 0.11
perfmetrics = 2.0
psycopg2 = 2.6.2
zc.lockfile = 1.2.1


[relstorage-eggs]
# These extra eggs are needed in the instance:
eggs =
    ${psycopg2:egg}
    RelStorage


[instance]
eggs +=
    ${relstorage-eggs:eggs}

# It's EITHER zeo-client OR rel-storage, so we explicitly set
# zeo-client to false here just to be safe.
zeo-client = false
# In filestorage terms this is the Data.fs:
rel-storage =
# As of March 2015 we have an NFS for the blobstorage.
    blob-dir ${conf:blob_storage}
    shared-blob-dir true
    type postgresql
    dsn ${postgresconf:dsn}


[zodbpack-conf]
recipe = collective.recipe.template[genshi]:genshi
input = templates/zodbpack.cfg.in
output = ${buildout:parts-directory}/conf/zodbpack.cfg


[zodbconvert-conf]
recipe = collective.recipe.template[genshi]:genshi
input = templates/zodbconvert.cfg.in
output = ${buildout:parts-directory}/conf/zodbconvert.cfg


[blobmigrate-conf]
recipe = collective.recipe.template[genshi]:genshi
input = templates/blobmigrate.cfg.in
output = ${buildout:parts-directory}/conf/blobmigrate.cfg


[zodbrevert-conf]
recipe = collective.recipe.template[genshi]:genshi
input = templates/zodb-relstorage-to-filestorage.cfg.in
output = ${buildout:parts-directory}/conf/zodb-relstorage-to-filestorage.cfg


[zodbscripts]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zodbpack zodbconvert


[psycopg2]
# We add this part mostly because you may need to specify the
# include-dirs and rpath options to get psycopg2 to compile on a Mac.
recipe = zc.recipe.egg:custom
egg = psycopg2
# Your system may need some, none or all of these options.  See also
# the postgresconf section.
environment = psycopg2-env
#include-dirs = ${postgresconf:includedir}
#rpath = ${postgresconf:basedir}


[psycopg2-env]
# This is needed to help psycopg2 find the pg_config script
PATH=${postgresconf:bindir}:%(PATH)s


[postgresinit]
# Note that this part will only work when you have super-user access
# without password to the database server, otherwise you cannot
# connect to create a new database for RelStorage.  So this will not
# work on the LNE servers.  We would have to ask Guy Wauters to create
# a database and user.
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
# Create a bin/psql that points to the correct postgres binary
    if ! test -e ${buildout:directory}/bin/psql; then
        PSQL=${postgresconf:bindir}/psql
        if ! test -e $PSQL; then
            PSQL=$(which psql)
        fi
        ln -f -s "$PSQL" ${buildout:directory}/bin/psql
    fi
    echo "If you get an error that the database or role already exists, you can ignore that."
# The following assumes trust auth for the super-user on localhost
    ${buildout:directory}/bin/psql --host=${postgresconf:host} --port=${postgresconf:port} --username=${postgresconf:super-user} postgres << EOF
        CREATE DATABASE ${postgresconf:dbname};
        CREATE USER ${postgresconf:user} WITH PASSWORD '${postgresconf:password}';
        ALTER DATABASE ${postgresconf:dbname} OWNER TO ${postgresconf:user};
        GRANT ALL ON DATABASE ${postgresconf:dbname} TO ${postgresconf:user};
    EOF
    echo "PostgreSQL initialized"
