Migrations
==========

    >>> self.setRoles(('Manager'))

1 -> 2 : migrate themes
-----------------------

The first upgrade step changes the list of themes for objects and
user subscriptions.

The themes are already there:

    >>> from Products.minaraad.themes import ThemeManager
    >>> tm = ThemeManager(self.portal)
    >>> tm.themes
    [(21, 'Strategisch milieubeleid'),
     (22, 'Instrumenten'),
     (23, 'Milieuhygi\xc3\xabne en klimaat'),
     (24, 'Water en zee'),
     (25, 'Open Ruimte'),
     (26, 'Ruimtelijke ordening en mobiliteit'),
     (27, 'Participatie en lokale besturen')]


We also need some content for wich we'll migrate the theme:

    >>> for th_id, th_name in tm.themes:
    ...     self.portal.studies.invokeFactory(
    ...         'Study',
    ...         id='study_%s' % th_id,
    ...         title='Study %s' % th_name,
    ...         theme=th_id)
    'study_21'
    'study_22'
    'study_23'
    'study_24'
    'study_25'
    'study_26'
    'study_27'

We'll check the content has been created correctly:

    >>> [(x.Title(), x.getTheme(), x.getThemeName()) for x in self.portal.studies.contentValues()
    ...   if x.portal_type == 'Study']
    [('Study Strategisch milieubeleid', 21, 'Strategisch milieubeleid'),
     ('Study Instrumenten', 22, 'Instrumenten'),
     ('Study Milieuhygi\xc3\xabne en klimaat', 23, 'Milieuhygi\xc3\xabne en klimaat'),
     ('Study Water en zee', 24, 'Water en zee'),
     ('Study Open Ruimte', 25, 'Open Ruimte'),
     ('Study Ruimtelijke ordening en mobiliteit', 26, 'Ruimtelijke ordening en mobiliteit'),
     ('Study Participatie en lokale besturen', 27, 'Participatie en lokale besturen')]


Users can also subscribe to some themes, so we'll add some:
    >>> mtool = self.portal.portal_membership
    >>> mtool.addMember('first_user', 'secret', [], [], {'email': 'first@example.com'})
    >>> mtool.addMember('second_user', 'secret', [], [], {'email': 'second@example.com'})
    >>> mtool.addMember('last_user', 'secret', [], [], {'email': 'last@example.com'})

The first user will not have any theme, the second only one and the
last one a few:

    >>> from Products.minaraad.subscriptions import SubscriptionManager
    >>> smanager = SubscriptionManager(self.portal)
    >>> smanager._setThemes(['25'], mtool.getMemberById('second_user'))
    >>> smanager._setThemes(['23', '25', '27'], mtool.getMemberById('last_user'))

We check it's been correctly set:

    >>> [(x, smanager._getThemes(mtool.getMemberById('%s_user' % x))) for x in ['first', 'second', 'last']]
    [('first', ()),
     ('second', ('25',)),
     ('last', ('23', '25', '27'))]

Now, if we run the migration, those values will change:

    >>> from Products.minaraad.migration import migrate_themes
    >>> migrate_themes(self.portal)
    >>> [(x.Title(), x.getTheme(), x.getThemeName()) for x in self.portal.studies.contentValues()
    ...   if x.portal_type == 'Study']
    [('Study Strategisch milieubeleid', 41, 'Deugdelijk bestuur'),
     ('Study Instrumenten', 41, 'Deugdelijk bestuur'),
     ('Study Milieuhygi\xc3\xabne en klimaat', 23, 'Milieuhygi\xc3\xabne en klimaat'),
     ('Study Water en zee', 42, 'Omgevingskwaliteit'),
     ('Study Open Ruimte', 40, 'Biodiversiteit'),
     ('Study Ruimtelijke ordening en mobiliteit', 42, 'Omgevingskwaliteit'),
     ('Study Participatie en lokale besturen', 41, 'Deugdelijk bestuur')]

As we can see, the one using the theme number 23 did not change. That
is normal. At the time the migration was written, this theme had
already dissapeared so it's not migrated.

And the old themes will have disappeared (except 23):

    >>> tm.themes
    [(23, 'Milieuhygi\xc3\xabne en klimaat'),
     (40, 'Biodiversiteit'),
     (41, 'Deugdelijk bestuur'),
     (42, 'Omgevingskwaliteit')]

And users subscription are updated:

    >>> [(x, smanager._getThemes(mtool.getMemberById('%s_user' % x))) for x in ['first', 'second', 'last']]
    [('first', ()),
     ('second', ('40',)),
     ('last', ('23', '40', '41'))]

We can run the upgrade step as much as we want, the data will not
change anymore:

    >>> migrate_themes(self.portal)
    >>> [(x.Title(), x.getTheme(), x.getThemeName()) for x in self.portal.studies.contentValues()
    ...   if x.portal_type == 'Study']
    [('Study Strategisch milieubeleid', 41, 'Deugdelijk bestuur'),
     ('Study Instrumenten', 41, 'Deugdelijk bestuur'),
     ('Study Milieuhygi\xc3\xabne en klimaat', 23, 'Milieuhygi\xc3\xabne en klimaat'),
     ('Study Water en zee', 42, 'Omgevingskwaliteit'),
     ('Study Open Ruimte', 40, 'Biodiversiteit'),
     ('Study Ruimtelijke ordening en mobiliteit', 42, 'Omgevingskwaliteit'),
     ('Study Participatie en lokale besturen', 41, 'Deugdelijk bestuur')]

    >>> tm.themes
    [(23, 'Milieuhygi\xc3\xabne en klimaat'),
     (40, 'Biodiversiteit'),
     (41, 'Deugdelijk bestuur'),
     (42, 'Omgevingskwaliteit')]

    >>> [(x, smanager._getThemes(mtool.getMemberById('%s_user' % x))) for x in ['first', 'second', 'last']]
    [('first', ()),
     ('second', ('40',)),
     ('last', ('23', '40', '41'))]


2 -> 3: Save theme name
-----------------------

This upgrade step is used to trigger the 'save_theme_name' event on
existing objects (this will after be automagically triggered when
saving an object).

    >>> from Products.minaraad.migration import save_object_themes
    >>> save_object_themes(self.portal)

    >>> [s._theme_name for s in self.portal.studies.contentValues()
    ...  if s.portal_type == 'Study']
    ['Deugdelijk bestuur', 'Deugdelijk bestuur',
     'Milieuhygi\xc3\xabne en klimaat', 'Omgevingskwaliteit',
     'Biodiversiteit', 'Omgevingskwaliteit',
     'Deugdelijk bestuur']

Now if a theme is deleted, we'll still be able to access the name via getThemeName.

    >>> tm.deleteThemes([23, 41])
    >>> [s.getThemeName() for s in self.portal.studies.contentValues()
    ...  if s.portal_type == 'Study']
    ['Deugdelijk bestuur', 'Deugdelijk bestuur',
     'Milieuhygi\xc3\xabne en klimaat', 'Omgevingskwaliteit',
     'Biodiversiteit', 'Omgevingskwaliteit',
     'Deugdelijk bestuur']


3 -> 4: Migrate contact to two fields
-------------------------------------

This upgrade step changes the 'contact' fields into two fields:
coordinator and authors.

We first need some contacts:

    >>> self.portal.contactpersonen.contentValues()
    []

    >>> for c_id in ['first', 'second', 'third']:
    ...     _ = self.portal.contactpersonen.invokeFactory(
    ...         'ContactPerson',
    ...         id=c_id,
    ...         name=c_id.capitalize(),
    ...         email='%s@example.com' % c_id)
    >>> self.portal.contactpersonen.contentValues()
    [<ContactPerson at /plone/contactpersonen/first>,
     <ContactPerson at /plone/contactpersonen/second>,
     <ContactPerson at /plone/contactpersonen/third>]

And some content to migrate:

    >>> data = [('first_study', []),
    ...         ('second_study', [self.portal.contactpersonen.first,
    ...                           self.portal.contactpersonen.second]),
    ...         ('third_study', [self.portal.contactpersonen.second,
    ...                          self.portal.contactpersonen.first,
    ...                          self.portal.contactpersonen.third])]

    >>> for study_id, contacts in data:
    ...     _ = self.portal.studies.invokeFactory(
    ...         'Study',
    ...         id=study_id,
    ...         contact=contacts)

And again, some checkings:

    >>> [(study.id, study.getContact()) for study in self.portal.studies.contentValues()
    ...  if study.portal_type == 'Study']
    [('study_21', []),
     ('study_22', []),
     ('study_23', []),
     ('study_24', []),
     ('study_25', []),
     ('study_26', []),
     ('study_27', []),
     ('first_study', []),
     ('second_study', [<ContactPerson at /plone/contactpersonen/first>,
                       <ContactPerson at /plone/contactpersonen/second>]),
     ('third_study', [<ContactPerson at /plone/contactpersonen/second>,
                      <ContactPerson at /plone/contactpersonen/first>,
                      <ContactPerson at /plone/contactpersonen/third>])]

Now, when running the migration step, the first contact will become
the Coordinator and the other ones will become Authors:

    >>> from Products.minaraad.migration import migrate_contacts
    >>> migrate_contacts(self.portal)

    >>> [(study.id, study.getContact(), study.getCoordinator(), study.getAuthors())
    ...  for study in self.portal.studies.contentValues()
    ...  if study.portal_type == 'Study']
    [...
     ('study_27', [], None, []),
     ('first_study', [], None, []),
     ('second_study',
      [],
      <ContactPerson at /plone/contactpersonen/first>,
      [<ContactPerson at /plone/contactpersonen/second>]),
     ('third_study',
      [],
      <ContactPerson at /plone/contactpersonen/second>,
      [<ContactPerson at /plone/contactpersonen/first>,
       <ContactPerson at /plone/contactpersonen/third>])]

If we run if a second time, nothing changes:

    >>> migrate_contacts(self.portal)

    >>> [(study.id, study.getContact(), study.getCoordinator(), study.getAuthors())
    ...  for study in self.portal.studies.contentValues()
    ...  if study.portal_type == 'Study']
    [...
     ('study_27', [], None, []),
     ('first_study', [], None, []),
     ('second_study',
      [],
      <ContactPerson at /plone/contactpersonen/first>,
      [<ContactPerson at /plone/contactpersonen/second>]),
     ('third_study',
      [],
      <ContactPerson at /plone/contactpersonen/second>,
      [<ContactPerson at /plone/contactpersonen/first>,
       <ContactPerson at /plone/contactpersonen/third>])]
