.. -*-doctest-*-

Email subscription tests
========================


Initial setup
-------------

First some setup stuff::

    >>> from pprint import pprint
    >>> from Products.CMFCore.utils import getToolByName
    >>> portal = self.portal
    >>> pprops = getToolByName(portal, 'portal_properties')
    >>> pprops.minaraad_properties._updateProperty('themes', tuple())
    >>> member = getToolByName(portal, 'portal_membership').getAuthenticatedMember()

Now to test and setup some themes::

    >>> from Products.minaraad.themes import ThemeManager
    >>> tm = ThemeManager(portal)
    >>> tm.themes
    []
    >>> tm.addTheme('shrubbery')
    >>> tm.addTheme('oaks')
    >>> tm.addTheme('herring')
    >>> tm.themes
    [(1, 'shrubbery'), (2, 'oaks'), (3, 'herring')]


Subscribing and querying
------------------------

We'll try out the subscription process as the test user.

    >>> from Products.minaraad import subscriptions
    >>> sm = subscriptions.SubscriptionManager(portal)
    >>> pprint(sm._getSubscriptions())
    [<Subscription: id=Advisory; False>,
     <Subscription: id=AnnualReport; False>,
     <Subscription: id=MREvent; False>,
     <Subscription: id=NewsLetter; False>,
     <Subscription: id=Pressrelease; False>,
     <Subscription: id=Study; False>]
    >>> sm.themes
    ()

We subscribe to the annual reports by email.

    >>> sm.subscribe('AnnualReport', email=True)
    >>> pprint(sm._getSubscriptions())
    [<Subscription: id=Advisory; False>,
     <Subscription: id=AnnualReport; True>,
     <Subscription: id=MREvent; False>,
     <Subscription: id=NewsLetter; False>,
     <Subscription: id=Pressrelease; False>,
     <Subscription: id=Study; False>]
    >>> pprint(member.getProperty('subscriptions'))
    ('Advisory/0',
     'AnnualReport/1',
     'MREvent/0',
     'NewsLetter/0',
     'Pressrelease/0',
     'Study/0')
    >>> sm.themes
    ()

We check if we're actually subscribed::

    >>> sm.emailSubscribers('AnnualReport')
    [<MemberData at /plone/portal_memberdata/test_user_1_ used for /plone/acl_users>]

If we subscribe to something that is filtered by theme, like studies, we won't
actually be found as a subscriber until our list of subscribed themes matches
the theme of the item that is requested::

    >>> sm.subscribe('Study', email=True)
    >>> pprint(sm._getSubscriptions())
    [<Subscription: id=Advisory; False>,
     <Subscription: id=AnnualReport; True>,
     <Subscription: id=MREvent; False>,
     <Subscription: id=NewsLetter; False>,
     <Subscription: id=Pressrelease; False>,
     <Subscription: id=Study; True>]
    >>> pprint(member.getProperty('subscriptions'))
    ('Advisory/0',
     'AnnualReport/1',
     'MREvent/0',
     'NewsLetter/0',
     'Pressrelease/0',
     'Study/1')
    >>> sm.themes
    ()
    >>> sm.emailSubscribers('Study', themes=['3'])
    []

If we subscribe to the theme, too, we get the study.

    >>> sm.themes = ['3']
    >>> sm.emailSubscribers('Study', themes=['3'])
    [<MemberData at /plone/portal_memberdata/test_user_1_ used for /plone/acl_users>]
