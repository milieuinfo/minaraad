Using RelStorage
================

Plone can use filestorage (Data.fs) or RelStorage (Postgres
database).  The standard configs in this buildout currently use
RelStorage by extending relstorage.cfg.


Needed extra software
---------------------

Some packages may not yet have been installed on your system: you need
a postgres client, a postgres server (unless you only use this
buildout to connect to an existing postgres server on a different
machine) and a development library for postgres bindings.

Postgres version 9.x should be fine.  Pick the most recent that is
supported on your platform.  Milieuinfo, who host the minaraad project
is now (March 2015) about to move from 9.1 to 9.3.

On Ubuntu::

  $ sudo aptitude install postgresql  # installs server+client
  $ sudo aptitude install postgresql-client  # only the client
  $ sudo aptitude install libpq-dev  # dev library

On Mac OS X with port::

  $ sudo port install libpqxx  # this also installs postgresql90
  $ sudo port install postgresql90-server

Follow any instructions that 'port' prints for setting up the postgres server.

Running the buildout will add a database and user if the postgresinit
part is enabled; this is not needed on ontwikkel/oefen/productie, as
the databases will already have been created by the database admin.
On Linux you might need to edit some permissions in
/etc/postgresql/8.4/main/pg_hba.conf like setting up 'trust' for
authentication (bad for production, handy for development).


Compiling the Python Postgres bindings
--------------------------------------

You may need to set some of the options in the postgresconf part of
buildout.cfg to match your environment, especially the password and
some directories so psycopg2 (Python Postgres bindings) can be
properly compiled.  See the commented out lines in buildout.cfg.in.


Instance/zeoclient/zeoserver
----------------------------

The relstorage.cfg file reconfigures the instance to use RelStorage
instead.  No zeoserver or zeoclient are set up anymore.  So use the
``bin/instance`` command to connect to the Postgres database.  Should
you wish to, you could still use filestorage by not extending
relstorage.cfg.


Migrating to/from RelStorage
----------------------------

You can migrate a filestorage Data.fs to a fresh Postgres database.
Make sure var/filestorage/Data.fs has the current ZODB that you want
to migrate.  Then do this::

  $ bin/zodbconvert parts/conf/zodbconvert.cfg

This can take a while, at least when your database is several
Gigabytes, so you may want to do this within 'screen' in case you
loose connection to the server.

If there is already data in the target Postgres database the scripts
will end with an error.  You then need to add the ``--clear`` option
to first remove the old data.  Note that for this you need to be owner
of the database, so if you now get permission errors please ask your
database administrator for more rights.

The conversion also migrates blobs to a blobstoragenew directory.
Note that in the destination blob dir you may get less files:
especially .lock files and their blob files are not taken over,
because they are not needed.  On a fresh copy from the live site 200MB
out of 3.2 GB of blobs are lost/cleaned this way.  It seems fine to
use either the original or the new blobstorage.  The new one is
cleaner.

To migrate back from relstorage to filestorage (read: to create a
backup of the Postgres production database in filestorage form, in
backup.fs), do::

  $ bin/zodbconvert parts/conf/zodb-relstorage-to-filestorage.cfg

We have set that up to create a ``backup.fs`` file in the current
directory.

See also ``bin/zodbconvert --help``.


Packing the RelStorage
----------------------

Relstorages need to be packed regularly, just like the standard file
storages.  Packing is done by the bin/zodbpack script that is
installed if you have 'zodbscripts' in your buildout parts.  By
default zero days are kept, which can be changed with the --days
option.  But zero days is exactly what you want after you have just
migrated from filestorage to relstorage::

  $ bin/zodbpack parts/conf/zodbpack.cfg

The packing can also be split into two parts, which is recommended at
least after doing a big change on a large database, like after the
initial migration to RelStorage.  You then start with a pre pack::

  $ bin/zodbpack --prepack parts/conf/zodbpack.cfg

This changes nothing, but only does some analyzing.  The information on
what to pack gets stored in a table; the packing itself is not done.
A second prepack run is therefore much faster and a pack will also be
faster.

Afterwards, you should of course run the actual pack, using the
information stored by the prepack option::

  $ bin/zodbpack --use-prepack-state parts/conf/zodbpack.cfg

See also ``bin/zodbpack --help``.

Note that when you have multiple machines that connect to the
RelStorage, you only need to pack from one of them.


Initial database creation
-------------------------

There might be a part called ``[postgresinit]`` in relstorage.cfg.  It
creates the initial database and roles so the site works correctly.  You
can get it manually by using::

  bin/buildout install postgresinit

Note that it expects that the currently logged-in user is superuser
in postgresql.  If not, you might have to run the step manually (here
the example of what I did for minaraad)::

  sudo su postgres
  psql
  postgres=# CREATE DATABASE minaraad;
  postgres-# CREATE USER minaraad WITH password '123';
  postgres=# ALTER DATABASE minaraad OWNER TO minaraad;
  postgres=# GRANT ALL ON DATABASE minaraad TO minaraad;
  postgres=# CREATE DATABASE minaraad_plone;
  postgres=# ALTER DATABASE minaraad_plone OWNER TO minaraad;
  postgres=# GRANT ALL ON DATABASE minaraad_plone TO minaraad;

In my config file, I specified the user and database to be
``minaraad`` and the password ``123``.  It still complained about a
``minaraad_plone`` database so I had to create it too.


Postgres dump
-------------

A postgres dump on Mac can be done with something like this:

  /opt/local/lib/postgresql93/bin/pg_dump --format=c --role=minaraad -U minaraad -f /tmp/minaraad_plone4.pgdump minaraad_plone4

The postgres server in which you import the dump needs to be the same
version.  Probably a small version difference is fine.


Postgres restore
----------------

For a database dump created by Joost on 17 February 2016, this should do the trick:

createuser pgplone
createuser minaraad_ro
createdb minaraad
psql minaraad < ~/Downloads/minaraad_productie_2016-02-17.dump

Older info:

I (Maurits) don't know if Guy Wauters from Milieuinfo
(guy@milieuinfo.be) did the dump in the same way as above.  But I
recently got a dump from him.  Restoring it was troublesome.  Maybe in
the end this would have been fine on a fresh database::

  /opt/local/lib/postgresql93/bin/pg_restore --dbname=minaraad_plone4 --clean --disable-triggers minaraad_productie_20150325.dump

I got far too many errors this way, about database schemas and not
being able to remove or create stuff.  Maybe they could all be
ignored, but I did not trust it.  Similar problems when adding the
--schema-only option.

In the end, what I did was this:

As postgres user create roles and user.  For minaraad user specify the
password that you have set in the [postgresconf] section in the
buildout config files::

  /opt/local/lib/postgresql93/bin/createuser --no-login minaraad_ddl
  /opt/local/lib/postgresql93/bin/createuser --no-login minaraad_dml
  /opt/local/lib/postgresql93/bin/createuser --pwprompt minaraad

As postgres user open a psql prompt and give the minaraad user two
roles.  This may not be needed locally, but this is how it was done on
the production database::

  GRANT minaraad_ddl TO minaraad;
  GRANT minaraad_dml TO minaraad;

AS postgres user create the database::

  /opt/local/lib/postgresql93/bin/createdb --owner=minaraad minaraad_plone4

Now start the Plone Site as the normal user who always does that.
This makes sure the tables get created::

  bin/instance fg

Login to localhost:8080 and verify that there is no Plone Site.  Stop
Plone again.

Now as normal user open a psql prompt and truncate all the tables.
You may want to check first how many transactions are currently
there.  Should be about 10.  But we remove them all to make room for
the data that we will restore::

  minaraad_plone4=> \dt
                 List of relations
   Schema |       Name        | Type  |  Owner
  --------+-------------------+-------+----------
   public | blob_chunk        | table | minaraad
   public | commit_lock       | table | minaraad
   public | current_object    | table | minaraad
   public | object_ref        | table | minaraad
   public | object_refs_added | table | minaraad
   public | object_state      | table | minaraad
   public | pack_object       | table | minaraad
   public | pack_state        | table | minaraad
   public | pack_state_tid    | table | minaraad
   public | transaction       | table | minaraad
  (10 rows)
  minaraad_plone4=> SELECT count(*) FROM transaction;
   count
  -------
   10
  (1 row)

Once you have setup the database in this way, you can truncate all
tables.  If you get a fresh database dump later, you can do this
again, instead of dropping and creating the databse.  In a psql
prompt for your minaraad database, paste this:

TRUNCATE blob_chunk CASCADE;
TRUNCATE commit_lock CASCADE;
TRUNCATE current_object CASCADE;
TRUNCATE object_ref CASCADE;
TRUNCATE object_refs_added CASCADE;
TRUNCATE object_state CASCADE;
TRUNCATE pack_object CASCADE;
TRUNCATE pack_state CASCADE;
TRUNCATE pack_state_tid CASCADE;
TRUNCATE transaction CASCADE;

Now as postgres user do the restore.  You will want to redirect stdout
and especially stderr somewhere else, like here::

  /opt/local/lib/postgresql93/bin/pg_restore --dbname=minaraad_plone4 --clean --data-only --no-privileges --disable-triggers --jobs=4 minaraad_productie_20150325.dump > /tmp/pg_restore.out 2> /tmp/pg_restore.err

This may take 15 or 20 minutes.  In /tmp/pg_restore.err you will see
lots of errors like this::

  pg_restore: [archiver (db)] Error while PROCESSING TOC:
  pg_restore: [archiver (db)] Error from TOC entry 6221; 2613 9911303 BLOB 9911303 minaraad
  pg_restore: [archiver (db)] could not execute query: ERROR:  large object 9911303 does not exist
      Command was: SELECT pg_catalog.lo_unlink('9911303');

Apparently this can be safely ignored.  At the end there was this
warning::

  WARNING: errors ignored on restore: 4577

When finished, open psql again and check that you now have lots more
transactions, something like this::

  minaraad_plone4=> select count(*) from transaction;
   count
  -------
   25889
  (1 row)

Start the Plone Site and see if things work.


Further reading
---------------

http://www.vlent.nl/weblog/2010/09/25/relstorage-and-postgresql/
http://pypi.python.org/pypi/RelStorage

Currently we use RelStorage for a few clients in Belgium.  You may
want to have a look at their buildout configs.  See LNE and MHHC and
now Minaraad.
